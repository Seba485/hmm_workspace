<?xml version="1.0"?>
<launch>

	<!-- for testig the framework efficacy with in the gazebo enviroment (commenting the neuro_controller node the robot will still) -->
	
	<!-- Feedback arguments -->
		<arg name="modality" 	 default='evaluation'/> <!-- evaluatio, calibration, continuous -->
		<arg name="eval_type" default="2"/> <!-- 1->1 direction free, 2->2 direction free -->
		
		<!--<arg name="thresholds"   default='[0.9, 0.9]'/>-->
		<arg name="bar_th"   default='[0.85, 0.75, 0.9]'/>
		<arg name="n_class"      default='3'/>
		<arg name="classes"      default='[771, 783, 773]'/> <!--both feet, rest, both hand-->
		 <arg name="ref_class" default="771"/> <!-- class that turn left -->
		<arg name="classes_name" default='[first class, rest, second class]'/>
		<arg name="trials"       default='[7, 7, 7]'/>
		<arg name="show_on_rest" default='True'/>

	<!-- acquisition arguments -->
		
		<arg name="plugin" default='rosneuro::EGDDevice'/>
		<arg name="devarg" default='$(env HOME)/Desktop/data.gdf'/> <!--gdf file-->
		<!-- <arg name="devarg" default='gtec'/> -->
		<arg name="framerate"  default='16'/>
		<arg name="samplerate" default='512'/>

	<!-- recorder -->
		<arg name="autostart" default='true'/>
		<arg name="filepath"  default='$(env HOME)/Desktop/' /> <!--where the files are saved-->
			
	<!-- processing arguments -->
		<arg name="lap_path"      default='$(env HOME)/Desktop/laplacian16.dat'/> <!--lapalcian filter: lapmask_antneuro_32.dat  lapmask_gtec_16.dat-->
		<arg name="decoder_path"  default='$(env HOME)/Desktop/d6_bhbf_20240717.smr.dat'/> <!--classifier trained with eegc3_smr_train of cnbismr-train-new folder and saved with wc_save_classifier of wtk-master folder-->
		<arg name="n_channels"    default='16'/>
		<arg name="eog_threshold" default='43.0'/> 

	<!-- control framework arguments -->
		<arg name="integratorplugin"   default="rosneuro::integrator::Exponential"/> 
		<arg name="alpha" 	    	 default='0.96'/> <!--peso diminuito da 0.98 a 0.90-->

	<!-- protocol arguments -->
		<arg name="subject"   default="d6"/>
		<arg name="task"      default="mi_bfrtbh_T_2"/>
		<arg name="extra"     default=""/>
			
	<!-- Protocol parameters -->
		<rosparam param="/protocol/subject"	 subst_value="True">$(arg subject)</rosparam>
		<rosparam param="/protocol/modality" subst_value="True">$(arg modality)</rosparam>
		<rosparam param="/protocol/task"	 subst_value="True">$(arg task)</rosparam>
		<rosparam param="/protocol/extra"	 subst_value="True">$(arg extra)</rosparam>

	<!-- aquisition node -->
	<node name="acquisition" pkg="rosneuro_acquisition" type="acquisition" output="screen" >
		<param name="~plugin" 	  value="$(arg plugin)"/>
		<param name="~devarg" 	  value="$(arg devarg)"/>
		<param name="~samplerate" value="$(arg samplerate)"/>
		<param name="~framerate"  value="$(arg framerate)"/>
	</node>
  
	<!-- recorder node -->
	<node name="recorder" pkg="rosneuro_recorder" type="recorder" >
		<param name="~autostart" value="$(arg autostart)"/>
		<param name="~filepath" value="$(arg filepath)"/>
	</node>
	
	<!-- processing node -->
	<node name="smrbci" pkg="rosneuro_processing" type="test_smrbci" output="screen"> <!--test_smrci call the usefull function in SmrBci-->
		<param name="~lap_path" value="$(arg lap_path)"/>
		<param name="~decoder_path" value="$(arg decoder_path)"/>
		<param name="~n_channels" value="$(arg n_channels)"/>
	</node>
	
	<!-- traversability node -->
	<arg name="traversability_mode" default="real"/> <!-- null -->    <!-- real -->
	<arg name="max_distance" default="2"/>
    <arg name="odom_topic" default="/odometry/filtered"/>
    <arg name="costmap_2d_topic" default="/move_base/local_costmap/costmap"/>

	<!-- robot controller -->
    <arg name="move_base_status" default="/move_base/status"/>
    <arg name="controller_topic" default="/move_base_simple/goal"/>
    <arg name="hard_class_topic" default="/bar_feedback/hard_prediction"/>

	<!--input rosneuro_msg neurooutput in "neuroprediction" topic
		# NeuroOutput Message

		# Header
		Header header -> header.stamp time_now

		# NeuroHeader
		NeuroHeader neuroheader -> neuroheader che arriva del classificatore Ã¨ un uint32(unsigned int number)

		# Output
		NeuroDataFloat softpredict -> softpredict.data vector of prediction
		NeuroDataInt32 hardpredict -> hardpredict.data hot encoding exp [0 0 1]

		# NeuroDecoder
		NeuroDecoder decoder -> struct a tre elementi classes (vettore di interi), type  (string), path (string) arrivano dal classificatore
		-->
	
	<!--classes [771 773]-->
	
	<!--inserisci qui il nodo del hmm-->
	
    <node name="traversability" pkg='hmm_sim' type='traversability.py'>
        <param name="f"  value="$(arg framerate)"/>
        <param name="traversability_mode" value="$(arg traversability_mode)"/>
        <param name="costmap_2d_topic" value="$(arg costmap_2d_topic)"/>
        <param name="odom_topic" value="$(arg odom_topic)"/>
        <param name="max_distance"  value="$(arg max_distance)"/>
    </node>

    <node name="hmm" pkg='hmm_sim' type='hmm.py'> 
		<param name="f"  value="$(arg framerate)"/>
		<param name="ref_class" value="$(arg ref_class)"/>
        <param name="n_class" value="$(arg n_class)"/>
        <param name="dt" type="double" value="1.0" />
		<param name="classes" value="$(arg classes)"/>
		<param name="classes_name" value="$(arg classes_name)"/>
    </node>
	<!--output rosneuro_msg neurooutput pubblicato su "/hmm/neuroprediction"-->

	<!--3 classes now -->
	
	<node name="integrator" pkg="rosneuro_integrator" type="integrator" output="screen"> 
		<param name='framerate' value="512"/> 
		<param name="~n_class" value="$(arg n_class)"/>
		<rosparam param="plugin" subst_value="True">$(arg integratorplugin)</rosparam>
		<rosparam param="alpha" subst_value="True">$(arg alpha)</rosparam>
		<remap from="/smr/neuroprediction" to="/hmm/neuroprediction"/>
		<remap from="/integrated" to="/integrator/neuroprediction"/>
	</node> 

	<!--neurooutput pubblicato su "/integrator/neuroprediction"-->

	<!-- bar_feedback node -->
	<node name="bar_feedback" pkg="hmm_sim" type="bar_feedback" output="screen">
		<param name="sub_name" type="string" value="/integrator/neuroprediction"/>
		<param name="ref_class" value="$(arg ref_class)"/>
		<rosparam param="modality" subst_value="True">$(arg modality)</rosparam>
		<rosparam param="bar_th" subst_value="True">$(arg bar_th)</rosparam>
		<rosparam param="classes" subst_value="True">$(arg classes)</rosparam>
		<rosparam param="trials" subst_value="True">$(arg trials)</rosparam>
	</node>
	
	<!-- work with roslaunch wheelchair_iaslab_gazebo room.launch -->
	<!-- uncomment to move the wheelchair in gazebo -->
    <!-- <node pkg="robot_controller" type="neuro_controller.py" name="neuro_controller" output='screen'>
        <param name="hard_class_topic" value="$(arg hard_class_topic)"/>
        <param name="odom_topic" value="$(arg odom_topic)"/>
        <param name="move_base_status" value="$(arg move_base_status)"/>
        <param name="controller_topic" value="$(arg controller_topic)"/>
        <param name="modality" value="$(arg modality)"/>
    </node> -->


	<!-- work with roslaunch wheelchair_iaslab_gazebo room.launch -->
    <node pkg="hmm_sim" type="obstacle_spawner.py" name="obstacle_spawner" output='screen'>
        <param name="odom_topic" value="$(arg odom_topic)"/>
		<param name="eval_type" value="$(arg eval_type)"/>
    </node>
	

</launch>
