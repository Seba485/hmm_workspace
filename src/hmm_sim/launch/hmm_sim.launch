<launch>
    <!--<rosparam command="load" file="$(find hmm_sim)/launch/parameter.yaml"/> -->

    <!-- hmm node -->
    <arg name="framerate"  default='16'/>
    <arg name="classes"      default='[771, 783, 773]'/> <!--both feet, rest, both hand-->
    <!-- rest is always involved: hardcoded in hmm.py node -->
    <arg name="ref_class" default="773"/> <!-- class that turn left -->
    <arg name="n_class" default="3"/>
	<arg name="classes_name" default='[first class, rest, second class]' />

    <!-- bar feedback -->
    <arg name="modality" 	 default="robot_sim"/> <!-- continuous (no control), calibration, evaluation (classic evaluation + discrete control of the robot), robot_sim (continuous control of the robot)-->
    <arg name="trials"       default='[10, 10, 10]'/>
    <arg name="bar_th"   default='[0.5, 0.5, 0.5]'/><!--threshold for classification-->

    <!-- traversability -->
    <arg name="traversability_mode" default="real"/> <!-- null -->    <!-- real -->
    <arg name="max_distance" default="3"/>
    <arg name="odom_topic" default="/odometry/filtered"/>
    <arg name="costmap_2d_topic" default="/move_base/local_costmap/costmap"/>

    <!-- control framework arguments -->
    <arg name="integratorplugin"   default="rosneuro::integrator::Exponential"/> 
    <arg name="alpha" 	    	 default='0.95'/> <!--peso diminuito da 0.98 a 0.90-->

    <!-- robot controller -->
    <arg name="move_base_status" default="/move_base/status"/>
    <arg name="controller_topic" default="/move_base_simple/goal"/>
    <arg name="hard_class_topic" default="/bar_feedback/hard_prediction"/>

    <node name="static_classifier" pkg='hmm_sim' type='static_classifier.py'>
        <param name="f"  value="$(arg framerate)"/>
    </node> 
    
    <node name="traversability" pkg='hmm_sim' type='traversability.py' output="screen">
        <param name="f"  value="$(arg framerate)"/>
        <param name="traversability_mode" value="$(arg traversability_mode)"/>
        <param name="costmap_2d_topic" value="$(arg costmap_2d_topic)"/>
        <param name="odom_topic" value="$(arg odom_topic)"/>
        <param name="max_distance"  value="$(arg max_distance)"/>
    </node>


    <node name="hmm" pkg='hmm_sim' type='hmm.py'>
        <param name="f"  value="$(arg framerate)"/>
        <param name="ref_class" value="$(arg ref_class)"/>
        <param name="n_class" value="$(arg n_class)"/>
        <param name="classes" value="$(arg classes)"/>
		<param name="classes_name" value="$(arg classes_name)"/>
        <param name="dt" type="double" value="1.0" />
    </node>

    <node name="integrator" pkg="rosneuro_integrator" type="integrator" output='screen'> 
		<param name='framerate' value="512"/> 
		<param name="~n_class" value="$(arg n_class)"/>
		<rosparam param="plugin" subst_value="True">$(arg integratorplugin)</rosparam>
		<rosparam param="alpha" subst_value="True">$(arg alpha)</rosparam>
		<remap from="/smr/neuroprediction" to="/hmm/neuroprediction"/>
		<remap from="/integrated" to="/integrator/neuroprediction"/>
	</node> 

    <!-- if the modality is set to continuous no messages are published onn the event/bus so the integrator will never reset -->
    <node name="bar_feedback" pkg='hmm_sim' type='bar_feedback' output='screen'>
        <param name="sub_name" type="string" value="/integrator/neuroprediction"/>
        <param name="ref_class" value="$(arg ref_class)"/>
        <rosparam param="modality" subst_value="True">$(arg modality)</rosparam>
		<rosparam param="bar_th" subst_value="True">$(arg bar_th)</rosparam>
		<rosparam param="classes" subst_value="True">$(arg classes)</rosparam>
		<rosparam param="trials" subst_value="True">$(arg trials)</rosparam>
    </node>
    
    <!-- work with roslaunch wheelchair_iaslab_gazebo room.launch -->
    <node pkg="robot_controller" type="neuro_controller.py" name="neuro_controller" output='screen'>
        <param name="hard_class_topic" value="$(arg hard_class_topic)"/>
        <param name="odom_topic" value="$(arg odom_topic)"/>
        <param name="move_base_status" value="$(arg move_base_status)"/>
        <param name="controller_topic" value="$(arg controller_topic)"/>
        <param name="modality" value="$(arg modality)"/>
    </node>

    <node pkg="hmm_sim" type="obstacle_spawner.py" name="obstacle_spawner" output='screen'>
        <param name="odom_topic" value="$(arg odom_topic)"/>

    </node>



    
</launch>