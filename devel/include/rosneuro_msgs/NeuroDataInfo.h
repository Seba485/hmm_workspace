// Generated by gencpp from file rosneuro_msgs/NeuroDataInfo.msg
// DO NOT EDIT!


#ifndef ROSNEURO_MSGS_MESSAGE_NEURODATAINFO_H
#define ROSNEURO_MSGS_MESSAGE_NEURODATAINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosneuro_msgs
{
template <class ContainerAllocator>
struct NeuroDataInfo_
{
  typedef NeuroDataInfo_<ContainerAllocator> Type;

  NeuroDataInfo_()
    : nsamples(0)
    , nchannels(0)
    , stride(0)
    , unit()
    , transducter()
    , prefiltering()
    , isint(0)
    , minmax()
    , labels()  {
    }
  NeuroDataInfo_(const ContainerAllocator& _alloc)
    : nsamples(0)
    , nchannels(0)
    , stride(0)
    , unit(_alloc)
    , transducter(_alloc)
    , prefiltering(_alloc)
    , isint(0)
    , minmax(_alloc)
    , labels(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _nsamples_type;
  _nsamples_type nsamples;

   typedef uint16_t _nchannels_type;
  _nchannels_type nchannels;

   typedef uint16_t _stride_type;
  _stride_type stride;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _unit_type;
  _unit_type unit;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _transducter_type;
  _transducter_type transducter;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _prefiltering_type;
  _prefiltering_type prefiltering;

   typedef uint8_t _isint_type;
  _isint_type isint;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _minmax_type;
  _minmax_type minmax;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _labels_type;
  _labels_type labels;





  typedef boost::shared_ptr< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> const> ConstPtr;

}; // struct NeuroDataInfo_

typedef ::rosneuro_msgs::NeuroDataInfo_<std::allocator<void> > NeuroDataInfo;

typedef boost::shared_ptr< ::rosneuro_msgs::NeuroDataInfo > NeuroDataInfoPtr;
typedef boost::shared_ptr< ::rosneuro_msgs::NeuroDataInfo const> NeuroDataInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator1> & lhs, const ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator2> & rhs)
{
  return lhs.nsamples == rhs.nsamples &&
    lhs.nchannels == rhs.nchannels &&
    lhs.stride == rhs.stride &&
    lhs.unit == rhs.unit &&
    lhs.transducter == rhs.transducter &&
    lhs.prefiltering == rhs.prefiltering &&
    lhs.isint == rhs.isint &&
    lhs.minmax == rhs.minmax &&
    lhs.labels == rhs.labels;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator1> & lhs, const ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosneuro_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6662e2f96240b54d66e954d119b2ab01";
  }

  static const char* value(const ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6662e2f96240b54dULL;
  static const uint64_t static_value2 = 0x66e954d119b2ab01ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosneuro_msgs/NeuroDataInfo";
  }

  static const char* value(const ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# NeuroDataInfo Message\n"
"\n"
"uint16    nsamples\n"
"uint16    nchannels\n"
"uint16    stride\n"
"string    unit\n"
"string    transducter\n"
"string    prefiltering		# Hardware prefiltering\n"
"uint8     isint\n"
"float64[] minmax\n"
"string[]  labels				# Labels of channels\n"
;
  }

  static const char* value(const ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nsamples);
      stream.next(m.nchannels);
      stream.next(m.stride);
      stream.next(m.unit);
      stream.next(m.transducter);
      stream.next(m.prefiltering);
      stream.next(m.isint);
      stream.next(m.minmax);
      stream.next(m.labels);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NeuroDataInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosneuro_msgs::NeuroDataInfo_<ContainerAllocator>& v)
  {
    s << indent << "nsamples: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.nsamples);
    s << indent << "nchannels: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.nchannels);
    s << indent << "stride: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.stride);
    s << indent << "unit: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.unit);
    s << indent << "transducter: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.transducter);
    s << indent << "prefiltering: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.prefiltering);
    s << indent << "isint: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isint);
    s << indent << "minmax[]" << std::endl;
    for (size_t i = 0; i < v.minmax.size(); ++i)
    {
      s << indent << "  minmax[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.minmax[i]);
    }
    s << indent << "labels[]" << std::endl;
    for (size_t i = 0; i < v.labels.size(); ++i)
    {
      s << indent << "  labels[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.labels[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSNEURO_MSGS_MESSAGE_NEURODATAINFO_H
