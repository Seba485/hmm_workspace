// Generated by gencpp from file rosneuro_msgs/NeuroEvent.msg
// DO NOT EDIT!


#ifndef ROSNEURO_MSGS_MESSAGE_NEUROEVENT_H
#define ROSNEURO_MSGS_MESSAGE_NEUROEVENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <rosneuro_msgs/NeuroHeader.h>

namespace rosneuro_msgs
{
template <class ContainerAllocator>
struct NeuroEvent_
{
  typedef NeuroEvent_<ContainerAllocator> Type;

  NeuroEvent_()
    : header()
    , neuroheader()
    , version()
    , event(0)
    , duration(0.0)
    , family(0)
    , description()  {
    }
  NeuroEvent_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , neuroheader(_alloc)
    , version(_alloc)
    , event(0)
    , duration(0.0)
    , family(0)
    , description(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::rosneuro_msgs::NeuroHeader_<ContainerAllocator>  _neuroheader_type;
  _neuroheader_type neuroheader;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _version_type;
  _version_type version;

   typedef int32_t _event_type;
  _event_type event;

   typedef float _duration_type;
  _duration_type duration;

   typedef int32_t _family_type;
  _family_type family;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _description_type;
  _description_type description;





  typedef boost::shared_ptr< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> const> ConstPtr;

}; // struct NeuroEvent_

typedef ::rosneuro_msgs::NeuroEvent_<std::allocator<void> > NeuroEvent;

typedef boost::shared_ptr< ::rosneuro_msgs::NeuroEvent > NeuroEventPtr;
typedef boost::shared_ptr< ::rosneuro_msgs::NeuroEvent const> NeuroEventConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosneuro_msgs::NeuroEvent_<ContainerAllocator1> & lhs, const ::rosneuro_msgs::NeuroEvent_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.neuroheader == rhs.neuroheader &&
    lhs.version == rhs.version &&
    lhs.event == rhs.event &&
    lhs.duration == rhs.duration &&
    lhs.family == rhs.family &&
    lhs.description == rhs.description;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosneuro_msgs::NeuroEvent_<ContainerAllocator1> & lhs, const ::rosneuro_msgs::NeuroEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosneuro_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf2c8b385ba6522f6af8df2da3585c4c";
  }

  static const char* value(const ::rosneuro_msgs::NeuroEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf2c8b385ba6522fULL;
  static const uint64_t static_value2 = 0x6af8df2da3585c4cULL;
};

template<class ContainerAllocator>
struct DataType< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosneuro_msgs/NeuroEvent";
  }

  static const char* value(const ::rosneuro_msgs::NeuroEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header 		header\n"
"NeuroHeader neuroheader\n"
"string 		version\n"
"int32  		event\n"
"float32 	duration\n"
"int32 		family\n"
"string 		description\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: rosneuro_msgs/NeuroHeader\n"
"uint32 seq\n"
;
  }

  static const char* value(const ::rosneuro_msgs::NeuroEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.neuroheader);
      stream.next(m.version);
      stream.next(m.event);
      stream.next(m.duration);
      stream.next(m.family);
      stream.next(m.description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NeuroEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosneuro_msgs::NeuroEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosneuro_msgs::NeuroEvent_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "neuroheader: ";
    s << std::endl;
    Printer< ::rosneuro_msgs::NeuroHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.neuroheader);
    s << indent << "version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.version);
    s << indent << "event: ";
    Printer<int32_t>::stream(s, indent + "  ", v.event);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
    s << indent << "family: ";
    Printer<int32_t>::stream(s, indent + "  ", v.family);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.description);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSNEURO_MSGS_MESSAGE_NEUROEVENT_H
