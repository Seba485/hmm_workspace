// Generated by gencpp from file rosneuro_msgs/GetAcquisitionInfoResponse.msg
// DO NOT EDIT!


#ifndef ROSNEURO_MSGS_MESSAGE_GETACQUISITIONINFORESPONSE_H
#define ROSNEURO_MSGS_MESSAGE_GETACQUISITIONINFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rosneuro_msgs/NeuroFrame.h>

namespace rosneuro_msgs
{
template <class ContainerAllocator>
struct GetAcquisitionInfoResponse_
{
  typedef GetAcquisitionInfoResponse_<ContainerAllocator> Type;

  GetAcquisitionInfoResponse_()
    : result(false)
    , device_model()
    , device_id()
    , frame()  {
    }
  GetAcquisitionInfoResponse_(const ContainerAllocator& _alloc)
    : result(false)
    , device_model(_alloc)
    , device_id(_alloc)
    , frame(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _device_model_type;
  _device_model_type device_model;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _device_id_type;
  _device_id_type device_id;

   typedef  ::rosneuro_msgs::NeuroFrame_<ContainerAllocator>  _frame_type;
  _frame_type frame;





  typedef boost::shared_ptr< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetAcquisitionInfoResponse_

typedef ::rosneuro_msgs::GetAcquisitionInfoResponse_<std::allocator<void> > GetAcquisitionInfoResponse;

typedef boost::shared_ptr< ::rosneuro_msgs::GetAcquisitionInfoResponse > GetAcquisitionInfoResponsePtr;
typedef boost::shared_ptr< ::rosneuro_msgs::GetAcquisitionInfoResponse const> GetAcquisitionInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator1> & lhs, const ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.device_model == rhs.device_model &&
    lhs.device_id == rhs.device_id &&
    lhs.frame == rhs.frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator1> & lhs, const ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosneuro_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8cf1aae8f1ae02fdc8775b1362badac5";
  }

  static const char* value(const ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8cf1aae8f1ae02fdULL;
  static const uint64_t static_value2 = 0xc8775b1362badac5ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosneuro_msgs/GetAcquisitionInfoResponse";
  }

  static const char* value(const ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool            result\n"
"\n"
"string device_model\n"
"string device_id\n"
"\n"
"NeuroFrame frame\n"
"\n"
"\n"
"================================================================================\n"
"MSG: rosneuro_msgs/NeuroFrame\n"
"# NeuroFrame Message\n"
"\n"
"# Header\n"
"Header header\n"
"\n"
"# NeuroHeader\n"
"NeuroHeader neuroheader\n"
"\n"
"# Sampling rate\n"
"uint16 sr\n"
"\n"
"# NeuroData\n"
"NeuroDataFloat eeg\n"
"NeuroDataFloat exg\n"
"NeuroDataInt32 tri\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: rosneuro_msgs/NeuroHeader\n"
"uint32 seq\n"
"\n"
"================================================================================\n"
"MSG: rosneuro_msgs/NeuroDataFloat\n"
"NeuroDataInfo info\n"
"float32[] data\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: rosneuro_msgs/NeuroDataInfo\n"
"# NeuroDataInfo Message\n"
"\n"
"uint16    nsamples\n"
"uint16    nchannels\n"
"uint16    stride\n"
"string    unit\n"
"string    transducter\n"
"string    prefiltering		# Hardware prefiltering\n"
"uint8     isint\n"
"float64[] minmax\n"
"string[]  labels				# Labels of channels\n"
"\n"
"================================================================================\n"
"MSG: rosneuro_msgs/NeuroDataInt32\n"
"NeuroDataInfo info\n"
"int32[] data\n"
"\n"
"\n"
;
  }

  static const char* value(const ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.device_model);
      stream.next(m.device_id);
      stream.next(m.frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetAcquisitionInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosneuro_msgs::GetAcquisitionInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "device_model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.device_model);
    s << indent << "device_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.device_id);
    s << indent << "frame: ";
    s << std::endl;
    Printer< ::rosneuro_msgs::NeuroFrame_<ContainerAllocator> >::stream(s, indent + "  ", v.frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSNEURO_MSGS_MESSAGE_GETACQUISITIONINFORESPONSE_H
